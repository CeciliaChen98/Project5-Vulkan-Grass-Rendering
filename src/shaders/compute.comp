#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
} time;

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// 1. Store the input blades

layout(set = 2, binding = 0, std430) buffer InBlades {
    Blade blades[];
} inBlades;

// 2. Write out the culled blades

layout(set = 2, binding = 0, std430) buffer CulledBlades {
    Blade blades[];
} culledBlades;

// 3. Write the total number of blades remaining
// corresponds to VkDrawIndirectCommand structure
layout(set = 0, binding = 3) buffer NumBlades {
 	uint vertexCount;   // Write the number of blades remaining here
 	uint instanceCount; // = 1
    uint firstVertex;   // = 0
 	uint firstInstance; // = 0
} numBlades;

vec3 computeWindDirection(float totalTime)
{
    // Base direction 
    vec3 baseDir = normalize(vec3(1.0, 0.0, 0.2));

    // Time-based oscillation to make wind sway gently
    float swayX = sin(totalTime * 0.7);
    float swayZ = cos(totalTime * 0.5 + 1.57); // phase offset
    float swayY = sin(totalTime * 0.3) * 0.2;  // small vertical fluctuation

    // Combine base direction with the time-varying components
    vec3 windDir = normalize(baseDir + vec3(swayX * 0.3, swayY, swayZ * 0.3));

    return windDir;
}

const uint  numBuckets = 8u; 
const float maxDist = 50.0f;
const float tolerance = 0.02f; // tolerance for frustum culling

bool isOutsideFrustum(vec3 pos)
{
    // Transform to clip space
    vec4 clip = camera.proj * camera.view * vec4(pos, 1.0);
    float h = clip.w + tolerance;

    return (clip.x > h || clip.x < -h ||
            clip.y > h || clip.y < -h ||
            clip.z > h || clip.z < -h);
}

bool distanceCull(float distance, uint id) {
    if(distance > maxDist) { return true; }
    float idx = mod(id, numBuckets);
    // The closer the distance, the more likely it is to be kept
    float limit = (1 - distance / maxDist) * float(numBuckets);
    return idx < limit;
}

void main() {

    const uint idx = gl_GlobalInvocationID.x;

	// Reset the number of blades to 0
	if (idx == 0u) {
	    numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // Apply forces on every blade and update the vertices in the buffer
    Blade b = inBlades.blades[idx];

    float orientation = b.v0.w;
    float height = b.v1.w;
    float width = b.v2.w;
    float stiffness = b.up.w;

    vec3 up = b.up.xyz;
    vec3 v0 = b.v0.xyz;
    vec3 v1 = b.v1.xyz;
    vec3 v2 = b.v2.xyz;

    // Gravity
    vec4 D = vec4(0.0);     // gravity direction
    vec3 gE = normalize(D.xyz) * D.w;

    vec3 dir = v2 - v0;
    vec3 f = normalize(dir - dot(dir, up) * up);         // facing direction
    vec3 gF = 0.25f * length(gE) * f;
    vec3 g = gE + gF;

    // Recovery
    vec3 iv2 = v0 + up * height;
    vec3 recover = (iv2 - v2) * stiffness;

    // Wind
    vec3 w = computeWindDirection(time.totalTime);  // wind direction
    float alignment = 1.0f - abs(dot(normalize(w), normalize(v2 - v0)));
    float heightRatio = dot(v2 - v0, up) / height;
    alignment *= heightRatio;
    w = alignment * w;

    vec3 tv2 = (g + recover + w) * time.deltaTime;
    v2 += tv2;

    // State Validation
    v2 = v2 - up * min(dot(up, v2 - v0), 0);
    float l_proj = length(v2 - v0 - up * dot(up, v2 - v0));

    v1 = v0 + height * up * max( 1.0f - l_proj/height, 0.05f * max(l_proj/height, 1.0f));
    float L0 = length(v2 - v0);
    float L1 = length(v1 - v0) + length(v2 - v1);
    // degree = 2
    float L = (2.0f * L0 + L1) / 3.0f;
    float r = height / L;
    vec3 v1_c = v0 + r * (v1 - v0);
    v2 = v1_c + r * (v2 - v1);
    v1 = v1_c;
  
    b.v1.xyz = v1;
    b.v2.xyz = v2;
    inBlades.blades[idx] = b;

	// Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads

    // Orientation Culling
    vec3 cameraForward = -vec3(camera.view[0][2], camera.view[1][2], camera.view[2][2]);
    if( abs(dot(f, cameraForward)) < 0.9f ){ return; }

    // View-frustum Culling
    vec3 m = 0.25f * v0 + 0.5 * v1 + 0.25* v2;  // Interpolation
    if (isOutsideFrustum(v0)) return;
    if (isOutsideFrustum(v2)) return;
    if (isOutsideFrustum(m)) return;

    // Distance Culling
    vec3 eye = -transpose(mat3(camera.view)) * camera.view[3].xyz;
    float distance = length(v0 - eye - up * dot(v0 - eye, up));
    if (distanceCull(distance, idx)) { return; }

    // Write the blade to the culled blades buffer
    uint writeIdx = atomicAdd(numBlades.vertexCount, 1); //prevent race conditions
    culledBlades.blades[writeIdx] = b;
}
