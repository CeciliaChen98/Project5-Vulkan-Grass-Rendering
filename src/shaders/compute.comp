#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WINDFORCE 1
#define GRAVITY 1
#define RECOVERY 1
#define ORIENTATION 1
#define DISTANCE 1
#define VIEWFRUSTUM 1

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// 1. Store the input blades

layout(set = 2, binding = 0, std430) buffer InBlades {
    Blade blades[];
} inBlades;

// 2. Write out the culled blades

layout(set = 2, binding = 1, std430) buffer CulledBlades {
    Blade blades[];
} culledBlades;

// 3. Write the total number of blades remaining
// corresponds to VkDrawIndirectCommand structure
layout(set = 2, binding = 2) buffer NumBlades {
 	uint vertexCount;   // Write the number of blades remaining here
 	uint instanceCount; // = 1
    uint firstVertex;   // = 0
 	uint firstInstance; // = 0
} numBlades;

vec3 computeWindDirection(vec3 bladePos, vec3 up, float totalTime)
{
    vec3 upN     = normalize(up);
    vec3 baseDir = vec3(0.8, 0.0, 0.6); 

    vec3 front = normalize(baseDir - upN * dot(baseDir, upN) + 1e-6);

    vec3 widthDir = normalize(cross(upN, front));

    float phi1 = dot(bladePos.xz, vec2(12.9898, 78.233));     
    float phi2 = dot(bladePos.xz, vec2(-41.425, 19.173));      
    float w1   = 1.15 + 0.15 * sin(dot(bladePos.xz, vec2(0.015, 0.021))); 
    float w2   = 0.95 + 0.12 * cos(dot(bladePos.xz, vec2(-0.018, 0.014)));

    float sway1 = sin(totalTime * w1 + phi1);  // -1..1
    float sway2 = cos(totalTime * w2 + phi2);
    float amp1  = 0.85;                       
    float amp2  = 0.90;                  

    float lift = 0.06 * sin(totalTime * 0.35 + phi2 * 0.7);

    vec3 dir = front + widthDir * (amp1 * sway1 + amp2 * sway2) + upN * lift;

    return normalize(dir);
}

const uint  numBuckets = 8u; 
const float maxDist = 48.0f;
const float threshold = 0.5f; // threshold for orientation culling
const float tolerance = 0.15f; // tolerance for frustum culling

bool isOutsideFrustum(vec3 pos)
{
    // Transform to clip space
    vec4 clip = camera.proj * camera.view * vec4(pos, 1.0);
    float h = clip.w + tolerance;

    return (clip.x > h || clip.x < -h ||
            clip.y > h || clip.y < -h ||
            clip.z > h || clip.z < -h);
}

bool distanceCull(float distance, uint id) {
    if(distance > maxDist) { return true; }
    float idx = id % numBuckets;
    // The closer the distance, the more likely it is to be kept
    float limit = (1 - distance / maxDist) * float(numBuckets);
    return idx > limit;
}

void main() {

    const uint idx = gl_GlobalInvocationID.x;

	// Reset the number of blades to 0
	if (idx == 0u) {
	    numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // Apply forces on every blade and update the vertices in the buffer
    Blade b = inBlades.blades[idx];

    float orientation = b.v0.w;
    float height = b.v1.w;
    float width = b.v2.w;
    float stiffness = b.up.w;

    vec3 up = b.up.xyz;
    vec3 v0 = b.v0.xyz;
    vec3 v1 = b.v1.xyz;
    vec3 v2 = b.v2.xyz;

    vec3 t1 = normalize(vec3(-cos(orientation), 0.0, sin(orientation)));

    // Gravity
#if GRAVITY
    vec4 D = vec4(0.0);     // gravity direction
    vec3 gE = normalize(D.xyz) * D.w;

    vec3 f = normalize(cross(t1, up));      // facing direction
    vec3 gF = 0.25f * length(gE) * f;
    vec3 g = gE + gF;
#else
    vec3 g = vec3(0.0);
#endif

    // Recovery
#if RECOVERY
    vec3 iv2 = v0 + up * height;
    vec3 recover = (iv2 - v2) * stiffness;
#else
	vec3 recover = vec3(0.0);
#endif

    // Wind
#if WINDFORCE
    vec3 w = 4 * computeWindDirection(v0, up, totalTime);  // wind direction
    float alignment = 1.0f - abs(dot(normalize(w), normalize(v2 - v0)));
    float heightRatio = dot(v2 - v0, up) / height;
    alignment *= heightRatio;
    w = alignment * w;
#else
    vec3 w = vec3(0.0);
#endif

    vec3 tv2 = (g + recover + w) * deltaTime;
    v2 += tv2;

    // State Validation
    v2 = v2 - up * min(dot(up, v2 - v0), 0);
    float l_proj = length(v2 - v0 - up * dot(up, v2 - v0));

    v1 = v0 + height * up * max( 1.0f - l_proj/height, 0.05f * max(l_proj/height, 1.0f));
    float L0 = length(v2 - v0);
    float L1 = length(v1 - v0) + length(v2 - v1);
    // degree = 2
    float L = (2.0f * L0 + L1) / 3.0f;
    float r = height / L;
    vec3 v1_c = v0 + r * (v1 - v0);
    v2 = v1_c + r * (v2 - v1);
    v1 = v1_c;
  
    b.v1.xyz = v1;
    b.v2.xyz = v2;
    inBlades.blades[idx] = b;

	// Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads
    vec3 cameraPos = inverse(camera.view)[3].xyz;
    vec3 viewDir = v0 - cameraPos - up * dot(v0 - cameraPos, up);

#if ORIENTATION
    // Orientation Culling
    if( abs(dot(t1, normalize(viewDir))) < threshold ){ return; }
#endif

#if VIEWFRUSTUM
    // View-frustum Culling
    vec3 m = 0.25f * v0 + 0.5 * v1 + 0.25* v2;  // Interpolation
    if(isOutsideFrustum(m) && isOutsideFrustum(v0) && isOutsideFrustum(v2)) { return; }
#endif

#if DISTANCE
    // Distance Culling
    float distance = length(viewDir);
    if (distanceCull(distance, idx)) { return; }
#endif

    // Write the blade to the culled blades buffer
    uint writeIdx = atomicAdd(numBlades.vertexCount, 1); //prevent race conditions
    culledBlades.blades[writeIdx] = b;
}
